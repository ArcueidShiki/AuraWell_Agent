"""
Minimal AuraWell Health Orchestrator for testing

A simplified version to test basic functionality without complex dependencies.
"""

import logging
from datetime import datetime, timezone, timedelta
from typing import Dict, List, Optional, Any
from dataclasses import dataclass

from ..models.enums import InsightType, InsightPriority

logger = logging.getLogger(__name__)


@dataclass
class HealthInsight:
    """Represents a health insight generated by AI analysis"""
    insight_id: str
    insight_type: InsightType
    priority: InsightPriority
    title: str
    description: str
    recommendations: List[str]
    data_points: Dict[str, Any]
    confidence_score: float  # 0.0 to 1.0
    generated_at: datetime
    expires_at: Optional[datetime] = None


@dataclass
class HealthPlan:
    """Represents a personalized health plan"""
    plan_id: str
    user_id: str
    title: str
    description: str
    goals: List[Dict[str, Any]]
    daily_recommendations: List[Dict[str, Any]]
    weekly_targets: Dict[str, Any]
    created_at: datetime
    valid_until: datetime
    last_updated: datetime


class MinimalOrchestrator:
    """
    Minimal orchestration engine for testing
    """
    
    def __init__(self):
        """Initialize the minimal orchestrator"""
        self.insights_cache: Dict[str, List[HealthInsight]] = {}
        self.plans_cache: Dict[str, HealthPlan] = {}
        logger.info("Minimal AuraWell Orchestrator initialized")
    
    def create_sample_insight(self, user_id: str) -> HealthInsight:
        """Create a sample health insight for testing"""
        return HealthInsight(
            insight_id=f"sample_{user_id}_{int(datetime.now().timestamp())}",
            insight_type=InsightType.RECOMMENDATION,
            priority=InsightPriority.MEDIUM,
            title="示例健康建议",
            description="这是一个示例健康洞察，用于测试系统功能",
            recommendations=[
                "保持规律的运动习惯",
                "确保充足的睡眠",
                "均衡饮食"
            ],
            data_points={"sample_metric": 100},
            confidence_score=0.8,
            generated_at=datetime.now(timezone.utc)
        )
    
    def create_sample_plan(self, user_id: str) -> HealthPlan:
        """Create a sample health plan for testing"""
        plan_id = f"plan_{user_id}_{int(datetime.now().timestamp())}"
        
        return HealthPlan(
            plan_id=plan_id,
            user_id=user_id,
            title="示例健康计划",
            description="这是一个示例健康计划，用于测试系统功能",
            goals=[
                {"type": "daily_steps", "target": 10000},
                {"type": "sleep_hours", "target": 8.0}
            ],
            daily_recommendations=[
                {"time": "morning", "activity": "晨间运动", "duration": 30},
                {"time": "evening", "activity": "放松活动", "duration": 15}
            ],
            weekly_targets={
                "exercise_sessions": 3,
                "meditation_sessions": 5
            },
            created_at=datetime.now(timezone.utc),
            valid_until=datetime.now(timezone.utc) + timedelta(days=30),
            last_updated=datetime.now(timezone.utc)
        )
    
    def get_system_status(self) -> Dict[str, Any]:
        """Get system status information"""
        return {
            "cached_users": len(self.insights_cache),
            "cached_plans": len(self.plans_cache),
            "status": "operational",
            "last_updated": datetime.now(timezone.utc).isoformat()
        }
    
    def clear_cache(self) -> None:
        """Clear all cached data"""
        self.insights_cache.clear()
        self.plans_cache.clear()
        logger.info("Cache cleared")


def test_minimal_orchestrator():
    """Test the minimal orchestrator"""
    print("Testing Minimal Orchestrator...")
    
    # Create orchestrator
    orchestrator = MinimalOrchestrator()
    print("✅ Orchestrator created")
    
    # Test system status
    status = orchestrator.get_system_status()
    print(f"✅ System status: {status}")
    
    # Create sample insight
    insight = orchestrator.create_sample_insight("test_user")
    print(f"✅ Sample insight created: {insight.title}")
    
    # Create sample plan
    plan = orchestrator.create_sample_plan("test_user")
    print(f"✅ Sample plan created: {plan.title}")
    
    # Test cache
    orchestrator.clear_cache()
    print("✅ Cache cleared")
    
    return True


if __name__ == "__main__":
    test_minimal_orchestrator()
